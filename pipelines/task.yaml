apiVersion: tekton.dev/v1alpha1
kind: Task
metadata:
  name: build-and-deploy
  namespace: tekton-pipelines
spec:
  inputs:
    resources:
      - name: git-repo
        type: git
    params:
      - name: pathToDockerFile
        type: string
      - name: pathToContext
        type: string
      - name: appChartRepo
        type: string
      - name: appName
        type: string
      - name: imageRepository
        type: string
      - name: ingressHost
        type: string
      - name: pvcName
        type: string
      - name: pvcResourcesStorage
        type: string
      - name: pvcStorageClassName
        type: string
      - name: backendAppEnv
        type: string
      - name: backendConsumerKey
        type: string
      - name: backendConsumerSecret
        type: string
      - name: backendAccessToken
        type: string
      - name: backendAccessTokenSecret
        type: string
      - name: backendAuthToken
        type: string
  outputs:
    resources:
      - name: image-registry
        type: image
  steps:
    - name: build-and-push
      image: gcr.io/kaniko-project/executor:v0.18.0
      securityContext:
        runAsUser: 0
      env:
        - name: DOCKER_CONFIG
          value: /data/.docker/
      command:
        - /kaniko/executor
      args:
        - --dockerfile=$(inputs.params.pathToDockerFile)
        - --destination=$(inputs.params.imageRepository)
        - --context=$(inputs.params.pathToContext)
        - --skip-tls-verify
        - --verbosity=debug
      volumeMounts:
        - name: kaniko-secret
          mountPath: /data
    - name: run-helm-add
      image: alpine/helm:3.1.1
      command: ["helm"]
      args:
        - repo
        - add
        - $(inputs.params.appName)
        - $(inputs.params.appChartRepo)
    - name: run-helm-update
      image: alpine/helm:3.1.1
      command: ["helm"]
      args:
        - repo
        - update
    - name: run-helm-upgrade
      image: alpine/helm:3.1.0
      command: ["helm"]
      args:
        - upgrade
        - --install
        - --namespace=$(inputs.params.appName)
        - $(inputs.params.appName)
        - api/api
        - --set
        - namespace=$(inputs.params.appName)
        - --set
        - name=$(inputs.params.appName)
        - --set
        - image.repository=$(inputs.params.imageRepository)
        - --set
        - ingress.hosts[0]=$(inputs.params.ingressHost)
        - --set
        - pvc.name=$(inputs.params.pvcName)
        - --set
        - pvc.resources.storage=$(inputs.params.pvcResourcesStorage)
        - --set
        - pvc.storageClassName=$(inputs.params.pvcStorageClassName)
        - --set
        - backend.appEnv=$(inputs.params.backendAppEnv)
        - --set
        - backend.consumerKey=$(inputs.params.backendConsumerKey)
        - --set
        - backend.consumerSecret=$(inputs.params.backendConsumerSecret)
        - --set
        - backend.accessToken=$(inputs.params.backendAccessToken)
        - --set
        - backend.accessTokenSecret=$(inputs.params.backendAccessTokenSecret)
        - --set
        - backend.authToken=$(inputs.params.backendAuthToken)
  volumes:
    - name: kaniko-secret
      secret:
        secretName: docker-hub
        items:
          - key: .dockerconfigjson
            path: .docker/config.json
